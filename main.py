import requests
import os
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    PicklePersistence,
)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TOKEN = os.getenv("API_KEY")
print(TOKEN)
# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–æ—Ä–º–æ–π –û–ì–≠
URL = 'https://reports.43edu.ru/gia/p_stat9.php'
# URL –±–∞–Ω–Ω–µ—Ä–∞ –∏ —Å—Ç–∏–∫–µ—Ä–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ HTTPS)
BANNER_URL = 'https://raw.githubusercontent.com/Miserz/OgeBot/refs/heads/main/img/banner.png'
WELCOME_STICKER = 'CAACAgIAAxkBAAEH7Z1j4OZVQWQK1uvjZl5rRT6W6L2zvgACZgADVp29CjoED0H-nNSDZiQE'

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MENU, ASK_PASS, ASK_CAPTCHA = range(3)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç 2 –¥–æ 5
GRADE_EMOJI = {
    '5': 'üåü',
    '4': 'üëç',
    '3': 'ü§î',
    '2': '‚ùå'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
    try:
        await update.effective_chat.send_sticker(WELCOME_STICKER)
    except:
        pass
    # –ë–∞–Ω–Ω–µ—Ä
    try:
        banner_resp = requests.get(BANNER_URL)
        banner_resp.raise_for_status()
        await update.effective_message.reply_photo(
            photo=banner_resp.content,
            caption='<b>‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>–ë–æ—Ç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –û–ì–≠</u>!‚ú®</b>\n–ë—ã—Å—Ç—Ä–æ ‚Ä¢ –£–¥–æ–±–Ω–æ ‚Ä¢ –ù–∞–¥—ë–∂–Ω–æ',
            parse_mode='HTML'
        )
    except:
        await update.effective_message.reply_text(
            '<b>‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –û–ì–≠!‚ú®</b>\n–ë—ã—Å—Ç—Ä–æ ‚Ä¢ –£–¥–æ–±–Ω–æ ‚Ä¢ –ù–∞–¥—ë–∂–Ω–æ',
            parse_mode='HTML'
        )

    # –ó–∞–ø—Ä–æ—Å –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –º–µ–Ω—é
    if 'passport' not in context.user_data:
        await update.effective_message.reply_text(
            '<i>üÜî –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</i>',
            parse_mode='HTML'
        )
        return ASK_PASS
    return await show_menu(update, context)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton('üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data='get_results')],
        [InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', callback_data='change_passport')],
        [InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help')]
    ]
    text = (
        '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n'
        '<b>üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
        '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:'
    )
    await update.effective_message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'get_results':
        return await request_captcha(update, context)

    if data == 'change_passport':
        context.user_data.pop('passport', None)
        await query.message.reply_text(
            '<i>üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</i>',
            parse_mode='HTML'
        )
        return ASK_PASS

    if data == 'help':
        await query.message.reply_text(
            'üõà <b>–ü–æ–º–æ—â—å:</b>\n'
            '1. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n'
            '2. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª.\n'
            '3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç¬ª.',
            parse_mode='HTML'
        )
        return await show_menu(update, context)

    return MENU

async def receive_pass(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    passport = update.message.text.strip()
    try:
        series, number = passport.split()
    except ValueError:
        await update.message.reply_text(
            '<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
            parse_mode='HTML'
        )
        return ASK_PASS
    context.user_data['passport'] = (series, number)
    await update.message.reply_text(
        f'‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b> {series} {number}',
        parse_mode='HTML'
    )
    return await show_menu(update, context)

async def request_captcha(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update_or_query.effective_message
    resp = requests.get(URL)
    resp.raise_for_status()
    context.user_data['cookies'] = resp.cookies

    soup = BeautifulSoup(resp.content, 'html.parser')
    sid = soup.find('input', {'name': 'captcha_sid'})['value']
    context.user_data['captcha_sid'] = sid

    img_tag = soup.find('img', {'src': lambda s: s and 'captcha.php' in s})
    img_data = requests.get('https://reports.43edu.ru' + img_tag['src']).content

    await message.reply_photo(
        photo=img_data,
        caption='<b>üîí –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:</b>',
        parse_mode='HTML'
    )
    return ASK_CAPTCHA

async def receive_captcha(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    captcha_text = update.message.text.strip()
    series, number = context.user_data['passport']
    sid = context.user_data['captcha_sid']

    data = {
        'y': '0',
        'passport_ser': series,
        'passport_num': number,
        'captcha_word': captcha_text,
        'captcha_sid': sid,
        'sv': '–ó–∞–ø—Ä–æ—Å'
    }
    resp2 = requests.post(URL, data=data, cookies=context.user_data['cookies'])
    resp2.raise_for_status()
    soup2 = BeautifulSoup(resp2.content, 'html.parser')

    raw = []
    for row in soup2.find_all('tr'):
        cells = row.find_all('td')
        texts = [td.get_text(strip=True) for td in cells]
        if '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª' in texts and '–û—Ü–µ–Ω–∫–∞' in texts:
            idx_s = texts.index('–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª')
            idx_g = texts.index('–û—Ü–µ–Ω–∫–∞')
            subj = cells[idx_s-1].get_text(strip=True) if idx_s>0 else ''
            score = cells[idx_s+1].get_text(strip=True) if idx_s+1<len(cells) else ''
            grade = cells[idx_g+1].get_text(strip=True) if idx_g+1<len(cells) else ''
            raw.append((subj, score, grade))

    seen, results = set(), []
    for subj, score, grade in raw:
        if subj and subj not in seen:
            seen.add(subj)
            results.append((subj, score, grade))

    if results:
        lines = ['<b>üìë –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:</b>']
        for subj, score, grade in results:
            emoji = GRADE_EMOJI.get(grade, '‚ùì')
            lines.append(f"{emoji} <b>{subj}</b>: –±–∞–ª–ª <i>{score}</i>, –æ—Ü–µ–Ω–∫–∞ <i>{grade}</i>")
        text = '\n'.join(lines)
    else:
        text = '<i>–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</i>'

    await update.effective_message.reply_text(text, parse_mode='HTML')
    return await show_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.effective_message.reply_text(
        '<i>‚ùé –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.</i>',
        parse_mode='HTML'
    )
    return ConversationHandler.END


def main() -> None:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ persistence –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    persistence = PicklePersistence(filepath='tg_data.pkl')
    app = ApplicationBuilder()\
        .token(TOKEN)\
        .persistence(persistence)\
        .build()

    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [CallbackQueryHandler(menu_handler)],
            ASK_PASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_pass)],
            ASK_CAPTCHA: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_captcha)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    app.run_polling()

if __name__ == '__main__':
    main()
